generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  EMPLOYEE
}

enum OrderStatus {
  PENDING
  IN_PROGRESS
  READY_FOR_DELIVERY
  OUT_FOR_DELIVERY
  DELIVERED
  CANCELLED
}

enum ProductType {
  SALE
  PURCHASE
}

enum UnitMeasure {
  UNIT
  GRAM
  KILOGRAM
  LITER
  MILILITER
}

enum PurchaseStatus {
  COMPLETED
  CANCELLED
}

model User {
  id        String        @id @default(uuid()) @db.Uuid
  name      String
  surname   String
  email     String     @unique
  password  String
  active    Boolean    @default(true)
  role      Role       @default(EMPLOYEE)
  purchases Purchase[]
  orders    Order[]
}

model ProductCategory {
  id       Int         @id @default(autoincrement())
  name     String      @unique
  type     ProductType
  products Product[]
}

model Product {
  id               String            @id @default(uuid()) @db.Uuid
  active           Boolean           @default(true)
  name             String
  description      String?
  unitPrice        Decimal           @db.Decimal(10, 2)
  categoryId       Int
  minStock         Int               @default(0)
  category         ProductCategory   @relation(fields: [categoryId], references: [id])
  createdAt        DateTime          @default(now())
  orderProducts    OrderProduct[]
  purchaseProducts PurchaseProduct[]
  stock            Stock?
  productionLogs   ProductionLog[]
}

model Order {
  id            Int            @id @default(autoincrement())
  customerId    String         @db.Uuid
  customer      Customer       @relation(fields: [customerId], references: [id])
  status        OrderStatus    @default(PENDING)
  createdAt     DateTime       @default(now())
  orderProducts OrderProduct[]
  userId        String         @db.Uuid
  user          User           @relation(fields: [userId], references: [id])
}

model OrderProduct {
  orderId   Int
  productId String  @db.Uuid
  quantity  Int     @default(1)
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id])

  @@id([orderId, productId])
}

model Purchase {
  id               Int               @id @default(autoincrement())
  createdAt        DateTime          @default(now())
  userId           String            @db.Uuid
  user             User              @relation(fields: [userId], references: [id])
  status           PurchaseStatus    @default(COMPLETED)
  totalAmount      Decimal           @db.Decimal(12, 2)
  purchaseProducts PurchaseProduct[]
}

model PurchaseProduct {
  purchaseId  Int
  productId   String      @db.Uuid
  quantity    Int         @default(1)
  unitPrice   Decimal     @db.Decimal(10, 2)
  unitMeasure UnitMeasure @default(UNIT)
  purchase    Purchase    @relation(fields: [purchaseId], references: [id], onDelete: Cascade)
  product     Product     @relation(fields: [productId], references: [id])

  @@id([purchaseId, productId])
}

model Customer {
  id           String  @id @default(uuid()) @db.Uuid
  name         String
  surname      String
  phone        String  @unique
  street       String
  city         String
  state        String
  neighborhood String
  complement   String?
  orders       Order[]
  active       Boolean @default(true)
}

model Stock {
  id        Int     @id @default(autoincrement())
  productId String  @unique @db.Uuid
  product   Product @relation(fields: [productId], references: [id])
  quantity  Int     @default(0)
}

model ProductionLog {
  id        Int      @id @default(autoincrement())
  productId String   @db.Uuid
  quantity  Int
  product   Product  @relation(fields: [productId], references: [id])
  date      DateTime @default(now())
}

model GeneralLog {
  id          Int      @id @default(autoincrement())
  description String
  date        DateTime @default(now())
}
